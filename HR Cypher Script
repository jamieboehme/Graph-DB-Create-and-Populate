// Create country node
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/jamieboehme/graph-db/main/countries.csv' AS row
MERGE (c:country {country_id: row.COUNTRY_ID})
  ON CREATE SET 
    c.country_id = row.COUNTRY_ID,
    c.country_name = row.COUNTRY_NAME,
    c.region_id = row.REGION_ID;

// Create department node
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/jamieboehme/graph-db/main/departments.csv' AS row
MERGE (d:dept {dept_id: row.DEPARTMENT_ID})
  ON CREATE SET 
    d.dept_id = row.DEPARTMENT_ID,
    d.dept_name = row.DEPARTMENT_NAME,
    d.manager_id = row.MANAGER_ID,
    d.location_id = row.LOCATION_ID;

// Create employee node
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/jamieboehme/graph-db/main/employees.csv' AS row
MERGE (e:emp {emp_id: row.EMPLOYEE_ID})
  ON CREATE SET 
    e.emp_id = row.EMPLOYEE_ID,
    e.f_name = row.FIRST_NAME,
    e.l_name = row.LAST_NAME,
    e.email = row.EMAIL,
    e.job_id = row.JOB_ID,
    e.manager_id = row.MANAGER_ID,
    e.dept_id = row.DEPARTMENT_ID;

// Create job history node
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/jamieboehme/graph-db/main/job_history.csv' AS row
MERGE (h:jhist {emp_id: row.EMPLOYEE_ID})
  ON CREATE SET 
    h.emp_id = row.EMPLOYEE_ID,
    h.job_id = row.JOB_ID,
    h.dept_id = row.DEPARTMENT_ID,
    h.end_date = row.END_DATE;

// Create job node
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/jamieboehme/graph-db/main/jobs.csv' AS row
MERGE (j:job {job_id: row.JOB_ID})
  ON CREATE SET 
    j.job_id = row.JOB_ID,
    j.job_title = row.JOB_TITLE;

// Create location node
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/jamieboehme/graph-db/main/locations.csv' AS row
MERGE (l:loc {loc_id: row.LOCATION_ID})
  ON CREATE SET 
    l.loc_id = row.LOCATION_ID,
    l.state = row.STATE_PROVINCE,
    l.country_id = row.COUNTRY_ID;

// Create region node
LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/jamieboehme/graph-db/main/regions.csv' AS row
MERGE (r:region {region_id: row.REGION_ID})
  ON CREATE SET 
    r.region_id = row.REGION_ID,
    r.region_name = row.REGION_NAME;

//Ensure lookup of nodes is optimized, create indexes for any node properties used in the lookups
CREATE INDEX c_country_id FOR (c:country) ON (c.country_id);
CREATE INDEX c_region_id FOR (c:country) ON (c.region_id);
CREATE INDEX d_dept_id FOR (d:dept) ON (d.dept_id);
CREATE INDEX d_manager_id FOR (d:dept) ON (d.manager_id);
CREATE INDEX d_loc_id FOR (d:dept) ON (d.location_id);
CREATE INDEX e_emp_id FOR (e:emp) ON (e.emp_id);
CREATE INDEX e_job_id FOR (e:emp) ON (e.job_id);
CREATE INDEX e_manager_id FOR (e:emp) ON (e.manager_id);
CREATE INDEX e_dept_id FOR (e:emp) ON (e.dept_id);
CREATE INDEX h_emp_id FOR (h:jhist) ON (h.emp_id);
CREATE INDEX h_job_id FOR (h:jhist) ON (h.job_id);
CREATE INDEX h_dept_id FOR (h:jhist) ON (h.dept_id);
CREATE INDEX j_job_id FOR (j:job) ON (j.job_id);
CREATE INDEX l_loc_id FOR (l:loc) ON (l.loc_id);
CREATE INDEX l_country_id FOR (l:loc) ON (l.country_id);
CREATE INDEX r_region_id FOR (r:region) ON (r.region_id);
CALL db.awaitIndexes();

//Visualize Schema
call db.schema.visualization;


//Create Relationships

//country and location relationship
MATCH
  (c:country),
  (l:loc)
WHERE c.country_id=l.country_id
CREATE (c)-[r:contains]->(l);

MATCH
  (l:loc),
  (c:country)
WHERE l.country_id=c.country_id
CREATE (l)-[r2:resides_in]->(c);

//country and region relationship
MATCH
  (c:country),
  (r:region)
WHERE c.region_id=r.region_id
CREATE (c)-[r:located_in]->(r);

MATCH
  (r:region),
  (c:country)
WHERE r.region_id=c.region_id
CREATE (r)-[r:contains]->(c);

//department and location relationship
MATCH
  (d:dept),
  (l:loc)
WHERE d.location_id=l.loc_id
CREATE (d)-[r:located_in]->(l);

MATCH
  (l:loc),
  (d:dept)
WHERE l.loc_id=d.location_id
CREATE (l)-[r:contains]->(d);

//department and employee relationship
MATCH
  (d:dept),
  (e:emp)
WHERE d.manager_id=e.emp_id
CREATE (d)-[r:managed_by]->(e);

MATCH
  (e:emp),
  (d:dept)
WHERE e.emp_id=d.manager_id
CREATE (e)-[r:manages]->(d);

//employee history and employee relationship
MATCH
  (h:jhist),
  (e:emp)
WHERE e.emp_id=h.emp_id
CREATE (h)-[r:previously_held_by]->(e);

MATCH
  (e:emp),
  (h:jhist)
WHERE e.emp_id=h.emp_id
CREATE (e)-[r:previously_held_job]->(h);

//employee and manager relationship
MATCH
  (m:emp),
  (e:emp)
WHERE m.manager_id=e.emp_id
CREATE (m)-[r:managed_by]->(e);

MATCH
  (e:emp),
  (m:emp)
WHERE e.emp_id=m.manager_id
CREATE (e)-[r:manages]->(m);

//employee and job relationship
MATCH
  (j:job),
  (e:emp)
WHERE  j.job_id=e.job_id
CREATE (j)-[r:held_by]->(e);

MATCH
  (e:emp),
  (j:job)
WHERE e.job_id=j.job_id
CREATE (e)-[r:holds]->(j);

//Helpful queries 

//query to visualize relationships between nodes
call db.schema.visualization;

//query for what kind of nodes exist and some property and relationship information
MATCH (n) WHERE rand() <= 1
RETURN
DISTINCT labels(n),
count(*) AS SampleSize,
avg(size(keys(n))) as Avg_PropertyCount,
min(size(keys(n))) as Min_PropertyCount,
max(size(keys(n))) as Max_PropertyCount,
avg(size( (n)-[]-() ) ) as Avg_RelationshipCount,
min(size( (n)-[]-() ) ) as Min_RelationshipCount,
max(size( (n)-[]-() ) ) as Max_RelationshipCount;

// query to visualize some specific data and their relationships
//n1 is first node and n2 is second node created
MATCH (n1)-[r]->(n2)  RETURN r, n1, n2 LIMIT 50;

//query to see all existing DB relationships
call db.relationshipTypes();

//sample query for Uniqueness of Property within employee node
MATCH (e:emp) 
RETURN count(DISTINCT e.f_name) AS DistinctName, 
       count(e.f_name) AS TotalUser, 
       100*count(DISTINCT e.f_name)/count(e.f_name) AS Unique;

//sample query to see relationships to region 2
match(r:region)
where r.region_id = '2'
return (r)-[]-() limit 25;

//sample query to see immediate relationships with Steven
match(e:emp)
where e.f_name = 'Steven'
return (e)-[]-()-[]-() limit 25;

//sample query to see 2-step relationships with Steven
match(e:emp)
where e.f_name = 'Steven'
return (e)-[]-()-[]-() limit 25;
